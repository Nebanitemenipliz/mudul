import datetime
from telethon import events, utils
from telethon.tl import types

from .. import loader, utils


@loader.tds
class MessageStatsMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
    strings = {"name": "MessageStats"}

    def __init__(self):
        self.name = self.strings["name"]
        self._client = None
        self.today = datetime.datetime.now().date()
        self.week_ago = self.today - datetime.timedelta(days=7)
        self.month_ago = self.today.replace(day=1)
        self.all_time = None

    async def client_ready(self, client, db):
        self._client = client
        self.all_time = (await self._client.get_messages(await self._client.get_input_entity(await self._client.get_me()), limit=1))[0].date.date()

    async def messagestatscmd(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await utils.answer(message, "<b>üë∫üî™–°—á–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...</b>")
        day_count = week_count = month_count = all_count = 0
        async for msg in self._client.iter_messages(message.to_id):
            if msg.date.date() == self.today:
                day_count += 1
            if self.week_ago <= msg.date.date() <= self.today:
                week_count += 1
            if self.month_ago <= msg.date.date() <= self.today:
                month_count += 1
            if msg.date.date() >= self.all_time:
                all_count += 1

        day_text = f"–ó–∞ –¥–µ–Ω—å: {day_count}"
        week_text = f"–ó–∞ –Ω–µ–¥–µ–ª—é: <code>{week_count}</code>"
        month_text = f"–ó–∞ –º–µ—Å—è—Ü: {month_count}"
        all_text = f"–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è: {all_count}"

        await utils.answer(message, f"<b>üëæ–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:</b>\n{day_text}\n{week_text}\n{month_text}\n{all_text}")
